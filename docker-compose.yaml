version: '3.7'

services:
  postgresql:
    image: postgres:15.3-alpine3.18
    restart: always
    container_name: postgresql
    hostname: postgresql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    command: ["postgres", "-c", "wal_level=logical"]
    healthcheck:
      test: ["CMD", "psql", "-U", "postgres", "-c", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000


  broker1:
    image: confluentinc/cp-kafka:7.2.2
    hostname: broker1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3 # replicate the topic to other brokers.


  broker2:
    image: confluentinc/cp-kafka:7.2.2
    hostname: broker2
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:9093,PLAINTEXT_HOST://localhost:29093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3


  broker3:
    image: confluentinc/cp-kafka:7.2.2
    hostname: broker3
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker3:9094,PLAINTEXT_HOST://localhost:29094
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3 


  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker1
      - broker2
      - broker3
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: broker1:9092,broker2:9093,broker3:9094
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - broker1
      - broker2
      - broker3
    ports:
      - "9081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker1:9092,broker2:9093,broker3:9094

  # debezium:
  #   image: debezium/connect:latest
  #   restart: always
  #   container_name: debezium
  #   hostname: debezium
  #   depends_on:
  #     - broker1
  #     - broker2
  #     - broker3
  #   ports:
  #     - '8083:8083'
  #   environment:
  #     BOOTSTRAP_SERVERS: broker1:9092,broker2:9093,broker3:9094
  #     GROUP_ID: 1
  #     CONFIG_STORAGE_TOPIC: connect_configs
  #     STATUS_STORAGE_TOPIC: connect_statuses
  #     OFFSET_STORAGE_TOPIC: connect_offsets
  #     KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
  #     ENABLE_DEBEZIUM_SCRIPTING: 'true'
  #   healthcheck:
  #     test:
  #       [
  #         'CMD',
  #         'curl',
  #         '--silent',
  #         '--fail',
  #         '-X',
  #         'GET',
  #         'http://localhost:8083/connectors',
  #       ]
  #     start_period: 10s
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # debezium-ui:
  #   image: debezium/debezium-ui:latest
  #   restart: always
  #   container_name: debezium-ui
  #   hostname: debezium-ui
  #   depends_on:
  #     debezium:
  #       condition: service_healthy
  #   ports:
  #     - '9080:8080'
  #   environment:
  #     KAFKA_CONNECT_URIS: http://debezium:8083

# temporal

  temporal:
    container_name: temporal
    depends_on:
      - postgresql
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PWD=admin
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    ports:
      - 7233:7233
    labels:
      kompose.volume.type: configMap
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233 # used by temporal
      - TEMPORAL_CLI_ADDRESS=temporal:7233 # used by tctl
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
    stdin_open: true
    tty: true
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    ports:
      - 8088:8080


volumes:
    postgres:
